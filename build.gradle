buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repository.jboss.org/maven2" }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://nexus.bsdn.org/content/groups/public" }
    }
    dependencies {
        //有了这个似乎都不用指定spring-boot相关依赖的版本了
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE")
//        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}


allprojects {
//    apply plugin: 'java'
//    apply plugin: 'idea'
//    apply plugin: 'org.springframework.boot'
//    apply plugin: "io.spring.dependency-management"
//    apply plugin: 'maven-publish'
    apply plugin: 'java'
    apply plugin: 'java-library' //api
    apply plugin: 'io.spring.dependency-management'

    group = 'com.lingyun.study'
    version = '1.0-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
//    compileJava.options.encoding = 'UTF-8'
//    compileTestJava.options.encoding = 'UTF-8'
//    tasks.withType(JavaCompile) {
//        options.encoding = 'UTF-8'
//    }
//    gradle.projectsEvaluated {
//        tasks.withType(JavaCompile) {
//            options.encoding = 'UTF-8'
//            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
//        }
//    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repository.jboss.org/maven2" }
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
        maven { url "https://nexus.bsdn.org/content/groups/public" }
        google()
    }
    dependencyManagement {
        imports {
            mavenBom('org.springframework.cloud:spring-cloud-dependencies:Hoxton.RELEASE')
            mavenBom('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.10.RELEASE')
            mavenBom('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:2.2.10.RELEASE')
        }
    }
    dependencies {
//        implementation('org.springframework.boot:spring-boot-dependencies')
        implementation('org.springframework.boot:spring-boot-starter')

        implementation('org.springframework.boot:spring-boot-devtools')

        implementation("org.springframework.boot:spring-boot-starter-logging")

        implementation 'org.springframework.boot:spring-boot-starter-websocket'

        implementation 'org.springframework.boot:spring-boot-starter-aop'

        implementation("com.google.code.gson:gson:2.8.2")

        implementation("cn.hutool:hutool-all:5.1.0")

        testImplementation("org.springframework.boot:spring-boot-starter-test")

    }

}

project(":cloud-eureka-server7001") {
    dependencies {
        implementation project(':cloud-project-commons')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:2.2.10.RELEASE')
        implementation('org.springframework.cloud:spring-cloud-dependencies:Hoxton.RELEASE')


    }

}
project(":cloud-eureka-server7002") {
    dependencies {
        implementation project(':cloud-project-commons')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:2.2.10.RELEASE')
        implementation('org.springframework.cloud:spring-cloud-dependencies:Hoxton.RELEASE')

    }

}
project(":cloud-consumer-order80") {
    dependencies {
        api project(':cloud-project-commons')
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.10.RELEASE')
//        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation("org.springframework.boot:spring-boot-starter-actuator")

        implementation 'org.springframework.cloud:spring-cloud-starter-hystrix:1.4.7.RELEASE'
    }
}
project(":cloud-provider-payment-8001") {
    dependencies {
        api project(':cloud-project-commons')
        implementation 'com.h2database:h2:1.4.196'
//        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation("org.springframework.boot:spring-boot-starter-actuator")

        implementation('org.springframework.boot:spring-boot-starter-data-jpa')
        implementation('org.springframework.cloud:spring-cloud-dependencies:Hoxton.RELEASE')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.10.RELEASE')
        //@HystrixCommand
        implementation 'org.springframework.cloud:spring-cloud-starter-hystrix:1.4.7.RELEASE'

//        implementation 'org.aspectj:aspectjrt:1.7.1'
//        implementation 'org.aspectj:aspectjweaver:1.7.1'
//        implementation 'org.springframework:spring-aspects'

    }

}

project(":cloud-provider-payment8002") {
    dependencies {
        api project(':cloud-project-commons')
        implementation 'com.h2database:h2:1.4.196'
//        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation("org.springframework.boot:spring-boot-starter-actuator")

        implementation('org.springframework.boot:spring-boot-starter-data-jpa')
        implementation('org.springframework.cloud:spring-cloud-dependencies:Hoxton.RELEASE')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.10.RELEASE')

    }

}
project(":cloud-config-center-3344") {
    dependencies {
        implementation('org.springframework.cloud:spring-cloud-config-server')
        implementation('org.springframework.cloud:spring-cloud-starter-bus-amqp')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.10.RELEASE')
    }
}
project(":cloud-config-client-3355") {
    dependencies {
//        implementation('org.springframework.cloud:spring-cloud-dependencies')
        implementation('org.springframework.cloud:spring-cloud-starter-bus-amqp')
        implementation('org.springframework.cloud:spring-cloud-config-client')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.10.RELEASE')
        implementation("org.springframework.boot:spring-boot-starter-actuator")
    }
}
project(":cloud-config-client-3366") {
    dependencies {
        implementation('org.springframework.cloud:spring-cloud-starter-bus-amqp')
        implementation('org.springframework.cloud:spring-cloud-config-client')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.10.RELEASE')
        implementation("org.springframework.boot:spring-boot-starter-actuator")
    }
}
project(":cloud-gateway-gateway9527") {

    dependencies {
        implementation('org.springframework.cloud:spring-cloud-starter-gateway')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.10.RELEASE')
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
    }
    configurations.implementation {
        exclude(group:'org.apache.tomcat.embed',module:'tomcat-embed-core')
        exclude(group:'org.apache.tomcat.embed',module:'tomcat-embed-el')
        exclude(group:'org.apache.tomcat.embed',module:'tomcat-embed-websocket')
        exclude(group:'org.springframework',module:'spring-webmvc')
        exclude(group:'org.springframework.boot',module:'spring-boot-starter-tomcat')

    }
}


/**
 * 根项目只定义项目依赖，不需要源码所以创建一个删除src目录的任务，
 */
task deleteSrcDir(type: Delete) {
    group('lingyun')
    doFirst {
        def srcDir = file('src');
        if (srcDir.exists() && srcDir.directory) {
            delete 'src'
            println 'root project src dir deleted...............................'
        } else {
            println 'root project src dir dose not exists...............................'
        }
        followSymlinks(true)
    }

}
//compileJava.dependsOn('deleteSrcDir')
